import dataclasses
import random

from playing_card_tools import Card, Deck


@dataclasses.dataclass
class Player:
    name: str = "NO_NAME"
    deck: list[Card] | None = None
    card_count: int = 0

    def __post_init__(self):
        self.deck = []

    def __str__(self):
        return f"{self.name}: ({self.card_count}) {[str(card) for card in self.deck] if self.deck else []}"


class WarDeck(Deck):
    def __init__(self):
        super().__init__()

    def deal(self, players: list[Player]):
        # Designate a "dealer" to ensure a random deal order
        dealer = random.randint(0, len(players) - 1)
        deal_order = players[dealer + 1:] + players[:dealer + 1]
        # Deal the entire deck one at a time
        for i in range(len(self.cards)):
            # Deal the top card of the deck
            card_dealt = self.draw_card()
            current_player = deal_order[i % len(players)]
            current_player.deck.append(card_dealt)
            current_player.card_count += 1


def resolve_war(players: list[Player], involved_cards: [list[Card]]) -> tuple[Player, list[Card]]:
    won_cards = involved_cards
    while True:
        played_cards = []
        for i, player in enumerate(players):
            # If player doesn't have enough cards for a war:
            if player.card_count < 4:
                other_player = players[1 - i]
                # The player that ran out of cards loses, and all of their cards are lost
                won_cards += player.deck
                player.card_count = 0
                player.deck = []

                # print(f"{player.name} is unable to complete a war, and loses the game!")

                return other_player, won_cards  # The other player wins the war

            # Each player adds three face-down cards to the pot (if they have enough cards)
            for _ in range(3):
                won_cards.append(player.deck.pop())
                player.card_count -= 1

            # Then, both players play a card to resolve the war
            played_cards.append(player.deck.pop())
            player.card_count -= 1

        # Now resolve the war by comparing the top cards
        if played_cards[0] == played_cards[1]:
            # If there is another tie, initiate another war recursively
            winner, additional_won_cards = resolve_war(players, played_cards)
            won_cards += additional_won_cards
        else:
            # Otherwise, select the winner based on the cards played
            card_values = [card.value for card in played_cards]
            winner = players[card_values.index(max(card_values))]
            won_cards += played_cards
            break  # Exit the loop when the war is resolved

    return winner, won_cards
